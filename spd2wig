#!/usr/bin/perl

##
# SPD2WIG (v0.1.0)
# Epigenetics Unit @ HuGeF [Human Genetics Foundation]
#
# Author:  Danny Incarnato (danny.incarnato[at]hugef-torino.org)
# Summary: Generates WIG files of transcripts reactivity from SPD files
#
# This program is free software, and can be redistribute  and/or modified
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Please see <http://www.gnu.org/licenses/> for more informations.
##

use strict;
use File::Basename;
use Getopt::Long qw(:config no_ignore_case);

my ($spd, $output, $help, $overwrite,
    @spd);
$output = "track.wig";

do {
    
    local $SIG{__WARN__} = sub { };

    GetOptions( "h|help"         => \$help,
                "s|spd=s"        => \$spd,
                "o|output=s"     => \$output,
                "ow|overwrite"   => \$overwrite ) or help(1);

};

help() if ($help);

die "\n  [!] Error: No SPD directory\/file specified\n\n" unless(defined $spd);
die "\n  [!] Error: Provided SPD directory\/file doesn't exist\n\n" if (!-e $spd);
die "\n  [!] Error: No output file has been specified\n\n" unless($output);
die "\n  [!] Error: Specified output file already exists\n\n" if (-e $output &&
                                                                  !$overwrite);

$output =~ s/(\.wig)?$/.wig/;

print "\n[+] Importing SPD file(s) [0 imported]";

if (-d $spd) {
    
    opendir(my $dh, $spd) or die "\n\n  [!] Error: Unable to read SPD files from directory\n\n";
    while(my $file = readdir($dh)) {
        
        next if ($file !~ m/\.spd$/);
        
        push(@spd, $spd . "/" . $file);
        print "\r[+] Importing SPD file(s) [" . scalar(@spd) . " imported]";
        
    }
    closedir($dh);
    
    die "\n\n  [!] Error: Specified folder doesn't contain any SPD file\n\n" unless(@spd);
    
}
else { # Single SPD file

    print "\r[+] Importing SPD file(s) [1 imported]";    
    push(@spd, $spd);
    
}

print "\n[+] Processing SPD file(s)\n";

open(my $wh, ">" . $output) or die "\n\n  [!] Error: Unable to write output file (" . $! . ")\n\n";
select((select($wh), $|=1)[0]);

foreach my $file (@spd) {
    
    my ($filename, $total, @reactivity);
    $filename = fileparse($file, ".spd");
    
    open(my $fh, "<" . $file) or die "\n  [!] Error: Failed to open SPD file \"" . $file . "\" (" . $! . ")\n\n";
    while(<$fh>) {
        
        chomp();
        my @line = split(/\t/, $_);
        
        push(@reactivity, $line[9]);
        $total++ if ($line[9]);
        
    }
    close($fh);
    
    if ($total) {
        
        print "\n  [*] Processing " . $filename . "\t[OK]";
        
        print $wh "track type=wiggle_0 name=\"Reactivity\"\n" if (!-s $output);
        print $wh "variableStep chrom=" . $filename . "\n";
        
        for(my $i=0; $i < @reactivity; $i++) {
            
            next if (!$reactivity[$i]);
            
            print $wh ($i + 1) . " " . $reactivity[$i] . "\n";
            
        }
        
    }
    else { print "\n  [*] Processing " . $filename . "\t[Skipped]"; }
    
}

close($wh);

if (!-s $output) {
    
    print "\n\n  [!] Error: None of the specified SPD files have reactive positions. Aborted.\n\n";
    
    unlink($output);
    
}

print "\n\n[+] All done.\n\n";

sub help {
    
    print "\n  [!] Error: Invalid option. Please check the help\n" if ($_[0]);
    
    die <<HELP;
 
 SPD2WIG (v0.1.0)
 Epigenetics Units @ HuGeF [Human Genetics Foundation]
 Group leader: Prof. Salvatore Oliviero
    
 Author:  Danny Incarnato (danny.incarnato[at]hugef-torino.org)
 Summary: Generates WIG files of transcripts reactivity from SPD files
 
 Usage:   spd2wig [Options] 
 
 Options                             Description
 -s  or --spd                        Path to the output folder generated by RSF Analyzer containing multiple SPD files,
                                     or to a single SPD file
 -o  or --output                     Output WIG file (Default: track.wig)
 -ow or --overwrite                  Overwrites output file (if already exists)
 
HELP

}
